"""j2cl_rta build rule.

Run the rta algorithm against a call graph generated by j2cl.
"""

load(
    "//build_defs/internal_do_not_use:j2cl_common.bzl",
    "J2clInfo",
)

_TransitiveLibraryInfo = provider(fields = ["files"])
_J2clRtaInfo = provider()

_RTA_ASPECT_ATTRS = ["deps", "exports", "module_deps", "modules"]

def _library_info_aspect_impl(target, ctx):
    library_info_file = target[J2clInfo]._private_.library_info if J2clInfo in target else []

    # Because the aspect propagates along attributes listed in _RTA_ASPECT_ATTRS,
    # the aspect has been previously applied to targets listed in those attributes.
    # We can safely assume that _TransitiveLibraryInfo exists on those targets.
    transitive_library_infos = []
    for attr in _RTA_ASPECT_ATTRS:
        if hasattr(ctx.rule.attr, attr):
            transitive_library_infos += [
                target[_TransitiveLibraryInfo].files
                for target in getattr(ctx.rule.attr, attr)
            ]

    return [_TransitiveLibraryInfo(
        files = depset(library_info_file, transitive = transitive_library_infos),
    )]

_library_info_aspect = aspect(
    attr_aspects = _RTA_ASPECT_ATTRS,
    provides = [_TransitiveLibraryInfo],
    implementation = _library_info_aspect_impl,
)

def _j2cl_rta_impl(ctx):
    # our rule can assume that "_TransitiveLibraryInfo" provider is present in all of its
    # dependencies because the aspect have been applied on them.
    all_library_info_files = depset(
        transitive = [t[_TransitiveLibraryInfo].files for t in ctx.attr.targets],
    ).to_list()

    unused_types_list = ctx.outputs.unused_types_list
    unused_members_list = ctx.outputs.unused_members_list
    removal_code_info_file = ctx.outputs.removal_code_info_file

    # TODO(b/120914781): use a param file
    rta_args = ctx.actions.args()
    rta_args.add("--unusedTypesOutput", unused_types_list)
    rta_args.add("--unusedMembersOutput", unused_members_list)
    rta_args.add("--removalCodeInfoOutput", removal_code_info_file)
    rta_args.add_all(all_library_info_files)

    # Run rta algorithm
    ctx.actions.run(
        inputs = all_library_info_files,
        outputs = [unused_types_list, unused_members_list, removal_code_info_file],
        arguments = [rta_args],
        progress_message = "Running rapid type analysis",
        executable = ctx.executable._rta_runner,
    )

    return [
        _J2clRtaInfo(
            unused_types_list = unused_types_list,
            removal_code_info_file = removal_code_info_file,
            unused_members_list = unused_members_list,
        ),
    ]

j2cl_rta = rule(
    attrs = {
        # This is where we initiate the propagation of our aspect. It will be applied on the target
        # listed in our targets attributes and then continue its propagation following "exports",
        # "deps", "modules" and "module_deps" attributes of those targets
        # TODO(b/114732596): Add a check on targets provided in "targets" field.
        "targets": attr.label_list(aspects = [_library_info_aspect]),
        "_rta_runner": attr.label(
            cfg = "host",
            executable = True,
            default = Label(
                "//tools/java/com/google/j2cl/tools/rta:J2clRtaRunner",
            ),
        ),
    },
    outputs = {
        "unused_types_list": "%{name}_unused_types.list",
        "unused_members_list": "%{name}_unused_members.list",
        "removal_code_info_file": "%{name}_removal_code_info",
    },
    implementation = _j2cl_rta_impl,
)
