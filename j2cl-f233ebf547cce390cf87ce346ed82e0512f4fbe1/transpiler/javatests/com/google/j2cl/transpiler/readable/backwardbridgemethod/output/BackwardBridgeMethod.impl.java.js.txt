/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.backwardbridgemethod.BackwardBridgeMethod.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode, strictModuleDepCheck}
 */
goog.module('com.google.j2cl.transpiler.readable.backwardbridgemethod.BackwardBridgeMethod$impl');


const C = goog.require('com.google.j2cl.transpiler.readable.backwardbridgemethod.C$impl');
const I = goog.require('com.google.j2cl.transpiler.readable.backwardbridgemethod.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {C<?string>}
 * @implements {I}
 */
class BackwardBridgeMethod extends C {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!BackwardBridgeMethod}
   * @public
   */
  static $create__() {
    BackwardBridgeMethod.$clinit();
    let $instance = new BackwardBridgeMethod();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_backwardbridgemethod_BackwardBridgeMethod__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_backwardbridgemethod_BackwardBridgeMethod__() {
    this.$ctor__com_google_j2cl_transpiler_readable_backwardbridgemethod_C__();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let i = BackwardBridgeMethod.$create__();
    let c = BackwardBridgeMethod.$create__();
    let a = BackwardBridgeMethod.$create__();
    i.m_get__java_lang_String('');
    c.m_get__java_lang_Object('');
    a.m_get__java_lang_Object('');
  }

  /**
   * Bridge method.
   * @override
   * @param {?string} arg0
   * @return {?string}
   * @public
   */
  m_get__java_lang_String(arg0) {
    return /**@type {?string} */ (
        $Casts.$to(super.m_get__java_lang_Object(arg0), j_l_String));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    BackwardBridgeMethod.$clinit = (() => {});
    BackwardBridgeMethod.$loadModules();
    C.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof BackwardBridgeMethod;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, BackwardBridgeMethod);
  }

  /**
   * @public
   */
  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    BackwardBridgeMethod,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.backwardbridgemethod.BackwardBridgeMethod'));


I.$markImplementor(BackwardBridgeMethod);


exports = BackwardBridgeMethod;
//# sourceMappingURL=BackwardBridgeMethod.js.map