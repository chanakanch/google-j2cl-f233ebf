/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.equalsandhashcodeininterface.ViaJsMethodInInterface.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode, strictModuleDepCheck}
 */
goog.module('com.google.j2cl.transpiler.readable.equalsandhashcodeininterface.ViaJsMethodInInterface$impl');


const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @interface
 */
class ViaJsMethodInInterface {
  /**
   * @abstract
   * @return {void}
   * @public
   */
  equals() {}

  /**
   * @abstract
   * @return {void}
   * @public
   */
  hashCode() {}

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    ViaJsMethodInInterface.$clinit = (() => {});
    ViaJsMethodInInterface.$loadModules();
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_equalsandhashcodeininterface_ViaJsMethodInInterface =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_equalsandhashcodeininterface_ViaJsMethodInInterface;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_equalsandhashcodeininterface_ViaJsMethodInInterface;
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadataForInterface(
    ViaJsMethodInInterface,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.equalsandhashcodeininterface.ViaJsMethodInInterface'));


ViaJsMethodInInterface.$markImplementor(
    /** @type {Function} */ (ViaJsMethodInInterface));


exports = ViaJsMethodInInterface;
//# sourceMappingURL=ViaJsMethodInInterface.js.map