/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.packageprivatemethods.package1.Parent.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode, strictModuleDepCheck}
 */
goog.module('com.google.j2cl.transpiler.readable.packageprivatemethods.package1.Parent$impl');


const SuperParent = goog.require('com.google.j2cl.transpiler.readable.packageprivatemethods.package1.SuperParent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class Parent extends SuperParent {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!Parent}
   * @public
   */
  static $create__() {
    Parent.$clinit();
    let $instance = new Parent();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_Parent__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_Parent__() {
    this.$ctor__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_SuperParent__();
  }

  /**
   * @override
   * @param {number} a
   * @return {number}
   * @public
   */
  m_foo__int_$pp_com_google_j2cl_transpiler_readable_packageprivatemethods_package1(
      a) {
    return a;
  }

  /**
   * @param {number} a
   * @param {number} b
   * @param {number} c
   * @return {number}
   * @public
   */
  m_bar__int__int__int(a, b, c) {
    return a + b + c + 1;
  }

  /**
   * Forwarding method for package private method.
   * @override
   * @param {number} arg0
   * @param {number} arg1
   * @param {number} arg2
   * @return {number}
   * @public
   */
  m_bar__int__int__int_$pp_com_google_j2cl_transpiler_readable_packageprivatemethods_package1(
      arg0, arg1, arg2) {
    return this.m_bar__int__int__int(arg0, arg1, arg2);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Parent.$clinit = (() => {});
    Parent.$loadModules();
    SuperParent.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Parent;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Parent);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    Parent,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.packageprivatemethods.package1.Parent'));



exports = Parent;
//# sourceMappingURL=Parent.js.map