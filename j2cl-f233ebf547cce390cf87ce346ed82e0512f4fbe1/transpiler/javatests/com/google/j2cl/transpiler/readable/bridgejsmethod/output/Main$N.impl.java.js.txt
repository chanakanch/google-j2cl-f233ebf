/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgejsmethod.Main$N.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode, strictModuleDepCheck}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.N$impl');


const M = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.M$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');
let B = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.B$impl');


/**
 * @abstract
 * @implements {M}
 */
class N extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {Main} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N;
  }

  /**
   * @param {Main} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }

  /**
   * @abstract
   * @return {B}
   * @public
   */
  getB() {}

  /**
   * @abstract
   * @override
   * @return {B}
   * @public
   */
  m_getB__() {}

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    N.$clinit = (() => {});
    N.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof N;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, N);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    N,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$N'));


M.$markImplementor(N);


exports = N;
//# sourceMappingURL=Main$N.js.map